criação tabela temporária

CREATE TEMPORARY TABLE tabPedidoTemp (
    codigoPedido VARCHAR(50),
    dataPedido DATE,
    sku VARCHAR(50),
    UPC VARCHAR(50),
    nome VARCHAR(100),
    qtd INT,
    valor DECIMAL(10, 2),
    frete DECIMAL(10, 2),
    email VARCHAR(100),
    codigoComprador VARCHAR(50),
    nomeComprador VARCHAR(100),
    endereco VARCHAR(255),
    cep VARCHAR(10),
    UF VARCHAR(2),
    pais VARCHAR(50)
);

importação do pedido
\\copy public.tabpedidotemp (codigopedido, datapedido, sku, upc, nome, qtd, valor, frete, email, codigocomprador, nomecomprador, endereco, cep, uf, pais) FROM 'D:/Juan/Nova pasta/pedidos.txt' DELIMITER ';' ;


CREATE TABLE cliente (
    codigoComprador INT PRIMARY KEY,
    nomeComprador VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    endereco VARCHAR(255),
    cep VARCHAR(10),
    UF VARCHAR(2),
    pais VARCHAR(50)
);
CREATE TABLE produtos (
    sku VARCHAR(50) PRIMARY KEY,
    UPC VARCHAR(50),
    nome VARCHAR(100) NOT NULL,
    valor DECIMAL(10, 2) NOT NULL
);
CREATE TABLE estoque (
    sku VARCHAR(50),
    qtd INT NOT NULL,
    FOREIGN KEY (sku) REFERENCES produtos(sku)
);
CREATE TABLE pedido (
    codigoPedido VARCHAR(50) PRIMARY KEY,
    dataPedido DATE NOT NULL,
    codigoComprador INT,
    valorTotal DECIMAL(10, 2),
    frete DECIMAL(10, 2),
    FOREIGN KEY (codigoComprador) REFERENCES cliente(codigoComprador)
);
CREATE TABLE itemPedido (
    codigoPedido VARCHAR(50),
    sku VARCHAR(50),
    qtd INT NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (codigoPedido, sku),
    FOREIGN KEY (codigoPedido) REFERENCES pedido(codigoPedido),
    FOREIGN KEY (sku) REFERENCES produtos(sku)
);
CREATE TABLE compra (
    codigoPedido VARCHAR(50),
    codigoComprador INT,
    dataCompra DATE NOT NULL,
    valorTotal DECIMAL(10, 2),
    PRIMARY KEY (codigoPedido, codigoComprador),
    FOREIGN KEY (codigoPedido) REFERENCES pedido(codigoPedido),
    FOREIGN KEY (codigoComprador) REFERENCES cliente(codigoComprador)
);
CREATE TABLE entrega (
    codigoPedido VARCHAR(50),
    enderecoEntrega VARCHAR(255),
    cep VARCHAR(10),
    UF VARCHAR(2),
    pais VARCHAR(50),
    PRIMARY KEY (codigoPedido),
    FOREIGN KEY (codigoPedido) REFERENCES pedido(codigoPedido)
);

INSERT INTO cliente (codigoComprador, nomeComprador, email, endereco, cep, UF, pais)
SELECT DISTINCT codigoComprador, nomeComprador, email, endereco, cep, UF, pais
FROM tabPedidoTemp;

INSERT INTO produtos (sku, UPC, nome, valor)
SELECT DISTINCT sku, UPC, nome, valor
FROM tabPedidoTemp;

INSERT INTO estoque (sku, qtd)
SELECT sku, SUM(qtd) 
FROM tabPedidoTemp
GROUP BY sku;


INSERT INTO pedido (codigoPedido, dataPedido, codigoComprador, valorTotal, frete)
SELECT DISTINCT codigoPedido, dataPedido, codigoComprador, SUM(valor * qtd), frete
FROM tabPedidoTemp
GROUP BY codigoPedido, dataPedido, codigoComprador, frete;

CREATE OR REPLACE PROCEDURE ProcessarPedidosParaEntrega()
LANGUAGE plpgsql AS
$$
DECLARE
    pedido_record RECORD;                -- Variável para armazenar o registro do pedido
    pedido_cursor CURSOR FOR              -- Cursor para selecionar os pedidos ordenados
        SELECT p.codigoPedido, p.codigoComprador, SUM(i.qtd * i.valor) AS valor_total
        FROM pedido p
        JOIN itemPedido i ON p.codigoPedido = i.codigoPedido
        WHERE i.sku IN (SELECT sku FROM estoque WHERE qtd > 0)  -- Verificar se há estoque
        GROUP BY p.codigoPedido, p.codigoComprador
        ORDER BY valor_total DESC;      -- Ordenar pelo maior valor

BEGIN
    OPEN pedido_cursor;                  -- Abrir o cursor

    LOOP
        FETCH pedido_cursor INTO pedido_record; -- Obter o próximo registro do cursor
        EXIT WHEN NOT FOUND;             -- Sair do loop se não houver mais registros

        -- 1. Verificar disponibilidade dos itens no estoque
        IF EXISTS (SELECT 1 
                   FROM itemPedido i 
                   WHERE i.codigoPedido = pedido_record.codigoPedido 
                     AND i.sku IN (SELECT sku FROM estoque WHERE qtd <= 0)) THEN
            RAISE NOTICE 'Pedido % não pode ser entregue, itens não disponíveis no estoque.', 
                         pedido_record.codigoPedido;
            CONTINUE;                     -- Pular para o próximo pedido
        END IF;

        -- 2. Atualizar o status do pedido para 'Em Entrega'
        UPDATE pedido 
        SET status = 'Em Entrega' 
        WHERE codigoPedido = pedido_record.codigoPedido;

        -- 3. Atualizar o estoque
        UPDATE estoque e
        SET qtd = e.qtd - (SELECT i.qtd FROM itemPedido i WHERE i.codigoPedido = pedido_record.codigoPedido AND i.sku = e.sku)
        WHERE e.sku IN (SELECT sku FROM itemPedido WHERE codigoPedido = pedido_record.codigoPedido);

        RAISE NOTICE 'Pedido % processado com sucesso. Comprador: %, Valor Total: %', 
                     pedido_record.codigoPedido, 
                     pedido_record.codigoComprador, 
                     pedido_record.valor_total;
    END LOOP;

    CLOSE pedido_cursor;                 -- Fechar o cursor
END;
$$;


